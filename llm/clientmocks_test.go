// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kardolus/maps/llm (interfaces: LLMClient)

// Package llm_test is a generated GoMock package.
package llm_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/kardolus/chatgpt-cli/client"
)

// MockLLMClient is a mock of LLMClient interface.
type MockLLMClient struct {
	ctrl     *gomock.Controller
	recorder *MockLLMClientMockRecorder
}

// MockLLMClientMockRecorder is the mock recorder for MockLLMClient.
type MockLLMClientMockRecorder struct {
	mock *MockLLMClient
}

// NewMockLLMClient creates a new mock instance.
func NewMockLLMClient(ctrl *gomock.Controller) *MockLLMClient {
	mock := &MockLLMClient{ctrl: ctrl}
	mock.recorder = &MockLLMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLMClient) EXPECT() *MockLLMClientMockRecorder {
	return m.recorder
}

// ListModels mocks base method.
func (m *MockLLMClient) ListModels() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockLLMClientMockRecorder) ListModels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockLLMClient)(nil).ListModels))
}

// ProvideContext mocks base method.
func (m *MockLLMClient) ProvideContext(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProvideContext", arg0)
}

// ProvideContext indicates an expected call of ProvideContext.
func (mr *MockLLMClientMockRecorder) ProvideContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvideContext", reflect.TypeOf((*MockLLMClient)(nil).ProvideContext), arg0)
}

// Query mocks base method.
func (m *MockLLMClient) Query(arg0 string) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query.
func (mr *MockLLMClientMockRecorder) Query(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockLLMClient)(nil).Query), arg0)
}

// Stream mocks base method.
func (m *MockLLMClient) Stream(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stream indicates an expected call of Stream.
func (mr *MockLLMClientMockRecorder) Stream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockLLMClient)(nil).Stream), arg0)
}

// WithContextWindow mocks base method.
func (m *MockLLMClient) WithContextWindow(arg0 int) *client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContextWindow", arg0)
	ret0, _ := ret[0].(*client.Client)
	return ret0
}

// WithContextWindow indicates an expected call of WithContextWindow.
func (mr *MockLLMClientMockRecorder) WithContextWindow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContextWindow", reflect.TypeOf((*MockLLMClient)(nil).WithContextWindow), arg0)
}

// WithServiceURL mocks base method.
func (m *MockLLMClient) WithServiceURL(arg0 string) *client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithServiceURL", arg0)
	ret0, _ := ret[0].(*client.Client)
	return ret0
}

// WithServiceURL indicates an expected call of WithServiceURL.
func (mr *MockLLMClientMockRecorder) WithServiceURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithServiceURL", reflect.TypeOf((*MockLLMClient)(nil).WithServiceURL), arg0)
}
